options(digits=2)
mytheme <- theme_bw() +
theme(panel.border=element_rect(color=NA), strip.background=element_rect(fill=NA),
text=element_text(size=32), axis.text.x = element_text(angle = 60, hjust = 1))
setwd('C:/Users/ning/Dropbox/NYU/Denis Pelli lab/experiment/NoiseDiscrimination/results')
#setwd('/Users/xiuyunwu/NoiseDiscrimination/data')
pp = list()
#csvFileName <- "Ning_runs_2017216.csv"
#csvFileName <- 'xiuyun_conditions_2016222_2.csv'
csvFileName <- 'Ning_conditions_201702171158.csv'
#csvFileName <- 'ideal_conditions_201641.csv'
options(digits=2)
observer<- unlist(strsplit(csvFileName,'[_]'))[1]
# csvFileName <- 'krish_runs_2016328_fineEccentricities1DegNoise.csv'
#T <- read.csv("xiuyun_conditionsN.csv")
# T <- read.csv("xiuyun_conditions_2015122.csv") # this uses exp for log transformation
# T <- read.csv("xiuyun_conditions_2016222.csv") # this file also includes data collected during 2015 fall and winter
# T <- read.csv("xiuyun_conditions_2016222_1.csv") # only includes 2015 fall and winter data
# T <- read.csv("xiuyun_conditions_2016222_2.csv") # only includes 2016 winter data
T <- read.csv(csvFileName) # only includes 2016 winter data
T$noiseDecayRadius = replace(T$noiseDecayRadius, T$noiseDecayRadius==Inf,32)
# T$noiseDecayRadius = replace(T$noiseDecayRadius, T$noiseDecayRadius==1.018875,1)
# T$noiseDecayRadius = replace(T$noiseDecayRadius, T$noiseDecayRadius==1.6302,1.73205080756888)
# T$noiseDecayRadius = replace(T$noiseDecayRadius, T$noiseDecayRadius==3.056625,3)
# T$noiseDecayRadius = replace(T$noiseDecayRadius, T$noiseDecayRadius==5.094375,5.19615242270663)
# T$noiseDecayRadius = replace(T$noiseDecayRadius, T$noiseDecayRadius==8.9661,9)
T$targetSize[abs(T$targetSize-2*sqrt(3)) < 1e-3] = 3.5 # fix for 2sqrt(3)
T$shiftedEccentricity = T$eccentricity + 0.05 # foveal critical spcaing
T$noiseDecayRadiusOverTargetSize = T$noiseDecayRadius/T$targetSize/2
T$noiseDecayRadiusOverTargetSize[T$noiseDecayRadiusOverTargetSize==0] = 0.05 # WITHOUT noice fix
if (unlist(strsplit(csvFileName,'[_]'))[2]=="runs"){
T$shiftedSquaredNoiseContrast = T$squaredNoiseContrast +0.005
T$meanThreshold = 10^T$thresholdLogContrast
T$sdThreshold = 10^T$thresholdContrastSD
}else if(unlist(strsplit(csvFileName,'[_]'))[2]=="conditions"){
#*_conditions_*.csv file specific processing
}
#noiseDecayRadius = factor(noiseDecayRadius, c(1,2,3,5,6,8,9,16))
# dat <- within(T, {
#   id = factor(S.No.)
#  letterSize = factor(letterSize, c(2,3,6))
#   eccentricity = factor(eccentricity, c(0,2,8,32))
#  Trials = factor(Trials, c(80, 100))
# })
noGrid <-
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank(),panel.background=element_blank(),axis.line=element_line(colour='black'))
# xbreaks = c(1, 2, 4, 8, 16, 32)
# ybreaks = c(0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 1, 1.5, 2.0)
# ylimits = aes(ymax = meanThreshold + sdThreshold, ymin=meanThreshold - sdThreshold)
# pp[[2]] <- ggplot(subset(T, T$targetKind=='gabor'), aes(x=targetSize, y=meanThreshold, color=factor(eccentricity), linetype=factor(noiseContrast) )) +
# get rid of eccessive measurements using *gabors* with various noiseCheckDeg
T = T[!(T$noiseSpectrum=='white' & T$noiseContrast==0.16 & T$eccentricity==0 & T$targetKind == 'gabor' & (T$targetSize==8 & abs(T$noiseCheckDeg-0.395) > 0.01)),]
bakT <- T # before filter
if (unlist(strsplit(csvFileName,'[_]'))[2]=="runs"){
# noiseSpectrum is still a number
# white:0 pink:1
T <- subset(T, T$noiseSpectrum==0
& T$noiseContrast==0.16
& noiseDecayRadius >= 16
)
}else if(unlist(strsplit(csvFileName,'[_]'))[2]=="conditions"){
#*_conditions_*.csv file specific processing
T <- subset(T, T$noiseSpectrum=='white'
& T$noiseContrast==0.16
& noiseDecayRadius >= 16
)
} else {warning('Cannot understand .csv file type.')}
TT <- T
T <- rbind(subset(bakT, noiseDecayRadius>0 & noiseSpectrum == 0 & noiseContrast == 0.16),subset(bakT, noiseContrast==0))
# Threshold vs. DecayRadius/TargetSize
xbreaks = c(0.01, 0.25, 0.5,1, 2, 4, 8, 16, 32)
ybreaks = c(0.01, 0.05, 0.1, 0.2)
ylimits = aes(ymax = meanThreshold + sdThreshold, ymin=meanThreshold - sdThreshold)
pp[[1]] <- ggplot(T, aes(x=noiseDecayRadiusOverTargetSize, y=meanThreshold,
size=factor(targetSize),
color=factor(shiftedEccentricity),
shape=factor(noiseContrast))) +
# geom_errorbar(ylimits, width=0.05, alpha=0.6)+
geom_line(alpha=0.6, size=1, aes(group=factor(targetSize)))+
geom_point(alpha=0.6)+
# geom_abline(intercept = 5e-5, slope = 0, color="black", size=5) +
# geom_line(data=data.frame(x=seq(0.45, 32, 0.5),y=seq(0.45, 32, 0.5)), aes(x=x, y=y))+
# geom_segment(aes(x = 1, y = 1e-6, xend = 10, yend = 1e-4), color="black", linetype="dashed", size=1.5)+
scale_y_log10(breaks=ybreaks)+
scale_x_log10(breaks=xbreaks, limits = c(NA,10), label=as.character(xbreaks))+
# scale_y_log10() + scale_x_log10() +
scale_linetype_manual(values=c("solid", "longdash"))+
scale_size_discrete(range=c(4,8), name="Target Size (deg)") +
# scale_color_discrete()+
scale_shape_manual(values=c(18,16), name="Noise Contrast") +
scale_color_brewer(name=expression(Eccentricity[shifted]~ (deg)), labels = sort(unique(bakT$eccentricity)),type="div",  palette = 7) +
noGrid+
# facet_grid(.~eccentricity)+
labs(title = "Global Gaussian White Noise", x = "Noise Decay Radius / Target Size", y = 'Threshold Contrast')+
# annotate("text", hjust=1, x = 8, y = 7e-3, label = c("Global Gaussian White Noise"), size=8) +
#annotate("text", hjust=1, x = 8, y = 7e-3, label = paste('Observer: ', observer), size=8) +
guides(shape = guide_legend(override.aes = list(size=4))) +
# theme_tufte() +
theme(text=element_text(size=10), axis.text.x = element_text(angle = 45, hjust = 1))
print(pp[[1]])
# Threshold vs. DecayRadius/TargetSize
xbreaks = c(0.01, 0.25, 0.5,1, 2, 4, 8, 16, 32)
ybreaks = c(0.01, 0.05, 0.1, 0.2)
ylimits = aes(ymax = meanThreshold + sdThreshold, ymin=meanThreshold - sdThreshold)
pp[[2]] <- ggplot(T, aes(x=noiseDecayRadiusOverTargetSize, y=meanThreshold,
size=factor(targetSize),
color=factor(shiftedEccentricity),
shape=factor(noiseContrast))) +
# geom_errorbar(ylimits, width=0.05, alpha=0.6)+
geom_line(alpha=0.6, size=1, aes(group=factor(targetSize)))+
geom_point(alpha=0.6)+
# geom_abline(intercept = 5e-5, slope = 0, color="black", size=5) +
# geom_line(data=data.frame(x=seq(0.45, 32, 0.5),y=seq(0.45, 32, 0.5)), aes(x=x, y=y))+
# geom_segment(aes(x = 1, y = 1e-6, xend = 10, yend = 1e-4), color="black", linetype="dashed", size=1.5)+
scale_y_log10(breaks=ybreaks)+
scale_x_log10(breaks=xbreaks, label=as.character(xbreaks))+
scale_linetype_manual(values=c("solid", "longdash"))+
scale_size_discrete(range=c(4,8), name="Target Size (deg)") +
# scale_color_discrete()+
scale_shape_manual(values=c(18,16), name="Noise Contrast") +
scale_color_brewer(name=expression(Eccentricity[shifted]~ (deg)), labels = sort(unique(bakT$eccentricity)),type="div",  palette = 7) +
noGrid+
facet_grid(.~eccentricity)+
labs(title = "Global Gaussian White Noise", x = "Noise Decay Radius / Target Size", y = 'Threshold Contrast')+
# annotate("text", hjust=1, x = 8, y = 7e-3, label = c("Global Gaussian White Noise"), size=8) +
annotate("text", hjust=1, x = 8, y = 7e-3, label = paste(observer), size=8) +
guides(shape = guide_legend(override.aes = list(size=4))) +
# theme_tufte() +
theme(text=element_text(size=32), axis.text.x = element_text(angle = 45, hjust = 1))
print(pp[[2]])
T <- TT
# Threshold vs. Ecc
xbreaks = c(1, 8, 16, 32)
ybreaks = c(0.005, 0.03, 0.01, 0.05,0.1,0.15, 0.2)
ylimits = aes(ymax = meanThreshold + sdThreshold, ymin=meanThreshold - sdThreshold)
pp[[3]] <- ggplot(rbind(T, subset(bakT, noiseContrast==0)), aes(x=shiftedEccentricity, y=meanThreshold, color=factor(targetSize), shape=factor(noiseContrast))) +
geom_errorbar(ylimits, width=0.1)+
geom_line()+
geom_point(alpha=0.6, size=8)+
# geom_point(data=subset(bakT, noiseContrast==0), size=8, alpha=0.6, shape=18)+
# geom_segment(aes(x = 1, y = 0.02, xend = 10, yend = 0.2), color="black", linetype="dashed", size=1.5)+
scale_y_log10(breaks=ybreaks)+
# scale_x_log10(breaks=xbreaks)+
scale_x_continuous(breaks=xbreaks)+
scale_linetype_manual(values=c("solid", "longdash"))+
scale_size_discrete(range=c(0.7,2), name="Target Size (deg)") +
scale_color_discrete(name="Target Size (deg)")+
# scale_color_brewer(name="Target Size (deg)", type="div",  palette = 7) +
scale_shape_manual(values=c(18,16), name="Noise Contrast") +
noGrid+
facet_grid(.~targetKind)+
labs(title = "Object Identification", x =  expression(Eccentricity[shifted]~ (deg)), y = "Threshold Contrast")+
# annotate("text", hjust=0, x = 0.5, y = 6e-3, label = c("Global Gaussian White Noise"), size=8) +
# annotate("text", hjust=0, x = 0.5, y = 7e-3, label = c("Observer: Wu"), size=8) +
theme(text=element_text(size=32))
print(pp[[3]])
xbreaks = c(0.05, 1, 8, 16, 32)
ybreaks = c(1e-06, 1e-05, 1e-04, 1e-03, 1e-02)
ylimits = aes(ymax = meanNeq + sdNeq, ymin=meanNeq - sdNeq)
pp[[4]] <- ggplot(T, aes(x=shiftedEccentricity, y=meanNeq, color=factor(targetSize), size=factor(targetSize))) +
geom_errorbar(ylimits, width=0.1)+
geom_line()+
geom_point(alpha=0.6, size=8)+
# geom_abline(intercept = 5e-5, slope = 0, color="black", size=5) +
# geom_line(data=data.frame(x=seq(0.45, 32, 0.5),y=seq(0.45, 32, 0.5)), aes(x=x, y=y))+
geom_segment(aes(x = 1, y = 1e-6, xend = 10, yend = 1e-4), color="black", linetype="dashed", size=1.5)+
scale_y_log10(breaks=ybreaks)+
scale_x_log10(breaks=xbreaks, label=as.character(xbreaks))+
scale_linetype_manual(values=c("solid", "longdash"))+
scale_size_discrete(range=c(0.7,2), name="Target Size (deg)") +
scale_color_discrete(name="Target Size (deg)")+
#scale_color_brewer(type="div",  palette = 7)
noGrid+
facet_grid(.~targetKind)+
labs(title = "Object Identification", x = expression(Eccentricity[shifted]~ (deg)), y = expression(Neq~(deg^2)))+
annotate("text", hjust=1, x = 32, y = 3e-7, label = c("log-log slope: 2"), size=8) +
annotate("text", hjust=1, x = 32, y = 5e-7, label = c("Global Gaussian White Noise"), size=8) +
annotate("text", hjust=1, x = 32, y = 7e-7, label = paste(observer), size=8) +
theme(text=element_text(size=32))
print(pp[[4]])
T$shiftedEccentricity
describe(T)
T<- bakT
xbreaks = c(1, 8, 16, 32)
ybreaks = c(0.005, 0.03, 0.01, 0.05,0.1,0.15, 0.2)
ylimits = aes(ymax = meanThreshold + sdThreshold, ymin=meanThreshold - sdThreshold)
pp[[3]] <- ggplot(rbind(T, subset(bakT, noiseContrast==0)), aes(x=shiftedEccentricity, y=meanThreshold, color=factor(targetSize), shape=factor(noiseContrast))) +
geom_errorbar(ylimits, width=0.1)+
geom_line()+
geom_point(alpha=0.6, size=8)+
# geom_point(data=subset(bakT, noiseContrast==0), size=8, alpha=0.6, shape=18)+
# geom_segment(aes(x = 1, y = 0.02, xend = 10, yend = 0.2), color="black", linetype="dashed", size=1.5)+
scale_y_log10(breaks=ybreaks)+
# scale_x_log10(breaks=xbreaks)+
scale_x_continuous(breaks=xbreaks)+
scale_linetype_manual(values=c("solid", "longdash"))+
scale_size_discrete(range=c(0.7,2), name="Target Size (deg)") +
scale_color_discrete(name="Target Size (deg)")+
# scale_color_brewer(name="Target Size (deg)", type="div",  palette = 7) +
scale_shape_manual(values=c(18,16), name="Noise Contrast") +
noGrid+
facet_grid(.~targetKind)+
labs(title = "Object Identification", x =  expression(Eccentricity[shifted]~ (deg)), y = "Threshold Contrast")+
# annotate("text", hjust=0, x = 0.5, y = 6e-3, label = c("Global Gaussian White Noise"), size=8) +
# annotate("text", hjust=0, x = 0.5, y = 7e-3, label = c("Observer: Wu"), size=8) +
theme(text=element_text(size=32))
print(pp[[3]])
xbreaks = c(0.05, 1, 8, 16, 32)
ybreaks = c(1e-06, 1e-05, 1e-04, 1e-03, 1e-02)
ylimits = aes(ymax = meanNeq + sdNeq, ymin=meanNeq - sdNeq)
pp[[4]] <- ggplot(T, aes(x=shiftedEccentricity, y=meanNeq, color=factor(targetSize), size=factor(targetSize))) +
geom_errorbar(ylimits, width=0.1)+
geom_line()+
geom_point(alpha=0.6, size=8)+
# geom_abline(intercept = 5e-5, slope = 0, color="black", size=5) +
# geom_line(data=data.frame(x=seq(0.45, 32, 0.5),y=seq(0.45, 32, 0.5)), aes(x=x, y=y))+
geom_segment(aes(x = 1, y = 1e-6, xend = 10, yend = 1e-4), color="black", linetype="dashed", size=1.5)+
scale_y_log10(breaks=ybreaks)+
scale_x_log10(breaks=xbreaks, label=as.character(xbreaks))+
scale_linetype_manual(values=c("solid", "longdash"))+
scale_size_discrete(range=c(0.7,2), name="Target Size (deg)") +
scale_color_discrete(name="Target Size (deg)")+
#scale_color_brewer(type="div",  palette = 7)
noGrid+
facet_grid(.~targetKind)+
labs(title = "Object Identification", x = expression(Eccentricity[shifted]~ (deg)), y = expression(Neq~(deg^2)))+
annotate("text", hjust=1, x = 32, y = 3e-7, label = c("log-log slope: 2"), size=8) +
annotate("text", hjust=1, x = 32, y = 5e-7, label = c("Global Gaussian White Noise"), size=8) +
annotate("text", hjust=1, x = 32, y = 7e-7, label = paste(observer), size=8) +
theme(text=element_text(size=32))
print(pp[[4]])
xbreaks = c(1, 2, 4, 6, 8, 16, 32)
ybreaks = c(1e-06, 1e-05, 1e-04, 1e-03, 1e-02)
ylimits = aes(ymax = meanNeq + sdNeq, ymin=meanNeq - sdNeq)
pp[[5]] <- ggplot(T, aes(x=targetSize, y=meanNeq, color=factor(shiftedEccentricity))) +
geom_errorbar(ylimits, width=0.1)+
geom_line()+
geom_point(alpha=0.6, size=8)+
geom_segment(aes(x = 1, y = 1e-6, xend = 10, yend = 1e-4), color="black", linetype="dashed", size=1.5)+
scale_y_log10(breaks=ybreaks)+
scale_x_log10(breaks=xbreaks)+
scale_linetype_manual(values=c("solid", "longdash"))+
scale_color_brewer(name=expression(Eccentricity[shifted]~ (deg)), labels = sort(unique(bakT$eccentricity)),type="div",  palette = 7) +
#scale_color_brewer(type="div",  palette = 7)
noGrid+
facet_grid(.~targetKind)+
labs(title = "Object Identification", x = "Target Size (deg)", y = expression(Neq~(deg^2)))+
annotate("text", hjust=1, x = 16, y = 3e-7, label = c("log-log slope: 2"), size=8) +
annotate("text", hjust=1, x = 16, y = 5e-7, label = c("Global Gaussian White Noise"), size=8) +
annotate("text", hjust=1, x = 16, y = 7e-7, label = paste(observer), size=8) +
theme(text=element_text(size=32))
print(pp[[5]])
xbreaks = c(0.05, 1, 8, 16, 32)
ybreaks = c(0.01,0.02,0.035,0.05,0.1, 0.15, 0.2,0.3)
ylimits = aes(ymax = meanEfficiency + sdEfficiency, ymin=meanEfficiency - sdEfficiency)
pp[[6]] <- ggplot(T, aes(x=shiftedEccentricity, y=meanEfficiency, color=factor(targetSize), size=factor(targetSize))) +
geom_errorbar(ylimits, width=0.1)+
geom_line()+
geom_point(alpha=0.6, size=8)+
scale_y_log10(breaks=ybreaks)+
scale_x_log10(breaks=xbreaks, label=as.character(xbreaks))+
scale_linetype_manual(values=c("solid", "longdash"))+
scale_size_discrete(range=c(0.7,2), name="Target Size (deg)") +
scale_color_discrete(name="Target Size (deg)")+
#scale_color_brewer(type="div",  palette = 7)
noGrid+
facet_grid(.~targetKind)+
labs(title = "Object Identification", x = expression(Eccentricity[shifted]~ (deg)), y = "Efficiency (%)")+
annotate("text", hjust=0, x = 0.5, y = 6e-3, label = c("Global Gaussian White Noise"), size=8) +
annotate("text", hjust=0, x = 0.5, y = 7e-3, label = paste(observer), size=8) +
theme(text=element_text(size=32))
print(pp[[6]])
xbreaks = c(1, 2, 4, 6, 8, 16, 32)
ybreaks = c(0.01,0.02,0.035,0.05,0.1, 0.15, 0.2,0.3)
ylimits = aes(ymax = meanEfficiency + sdEfficiency, ymin=meanEfficiency - sdEfficiency)
pp[[7]] <- ggplot(T, aes(x=targetSize, y=meanEfficiency, color=factor(shiftedEccentricity))) +
geom_errorbar(ylimits, width=0.1)+
geom_line()+
geom_point(alpha=0.6, size=8)+
scale_y_log10(breaks=ybreaks)+
scale_x_log10(breaks=xbreaks)+
scale_linetype_manual(values=c("solid", "longdash"))+
scale_size_discrete(range=c(0.7,2), name="Target Size (deg)") +
scale_color_brewer(name=expression(Eccentricity[shifted]~ (deg)), labels = sort(unique(bakT$eccentricity)),type="div",  palette = 7) +
#scale_color_brewer(type="div",  palette = 7)
noGrid+
facet_grid(.~targetKind)+
labs(title = "Object Identification", x = "Target Size (deg)", y = "Efficiency (%)")+
annotate("text", hjust=0, x = 0.5, y = 6e-3, label = c("Global Gaussian White Noise"), size=8) +
annotate("text", hjust=0, x = 0.5, y = 7e-3, label = paste(observer), size=8) +
theme(text=element_text(size=32))
print(pp[[7]])
xbreaks = c(0.01, 0.1, 1, 10)
ybreaks = c(1e-06, 1e-05, 1e-04, 1e-03, 1e-02)
# ylimits = aes(ymax = meanNeq + sdNeq, ymin=meanNeq - sdNeq)
pp[[8]] <- ggplot(T, aes(x=targetSize/shiftedEccentricity, y=targetSize^2/meanNeq, color=factor(shiftedEccentricity), size=factor(targetSize))) +
# geom_errorbar(ylimits, width=0.1)+
geom_point(alpha=0.8)+
geom_segment(aes(x = .1, y = 1e5, xend = 1, yend = 1e7), color="black", linetype="dashed", size=1.5)+
# geom_segment(aes(x = 1, y = 1e4, xend = 10, yend = 1e6), color="black", linetype="dashed", size=1.5)+
scale_y_log10()+
scale_x_log10(breaks=xbreaks)+
scale_linetype_manual(values=c("solid", "longdash"))+
scale_color_brewer(name=expression(Eccentricity[shifted]~ (deg)), labels = sort(unique(bakT$eccentricity)),type="div",  palette = 7) +
# scale_color_brewer(type="div",  palette = 7)+
scale_size_discrete(range=c(4,10), name="Target Size (deg)") +
noGrid+
facet_grid(.~targetKind)+
# labs(title = "Object Identification", x = expression(Eccentricity[shifted]/Target~ Size), y = "Poisson Rate (Target Area/Neq)")+
labs(title = "Object Identification", x = expression(Target~ Size/Eccentricity[shifted]), y = "Poisson Rate (Target Area/Neq)")+
annotate("text", hjust=0, x = 5e-2, y = 0.7e4, label = c("log-log slope: 2"), size=8) +
annotate("text", hjust=0, x = 5e-2, y = 1.0e4, label = c("Global Gaussian White Noise"), size=8) +
annotate("text", hjust=0, x = 5e-2, y = 1.4e4, label = paste(observer), size=8) +
theme(text=element_text(size=32))
print(pp[[8]])
T$noiseSpectrum
library(ggplot2)
library(data.table)
library(magrittr)
library(caret)
library(fields)
library(plot3D)
install.packages("fields")
install.packages("plot3D")
ex1data1 <- fread("ex1data1.txt",col.names=c("population","profit"))
setwd('C:\\Users\\ning\\OneDrive\\R works')
ex1data1 <- fread("ex1data1.txt",col.names=c("population","profit"))
head(ex1data1)
ex1data1%>%ggplot(aes(x=population, y=profit))+
geom_point(color="blue",size=4,alpha=0.5)+
ylab('Profit in $10,000s')+
xlab('Population of City in 10,000s')+ggtitle ('Figure 1: Scatter plot of training data')+
theme(plot.title = element_text(size = 16,colour="red"))
X=cbind(1,ex1data1$population)
y=ex1data1$profit
head(X)
computeCost=function(X,y,theta){
z=((X%*%theta)-y)^2
return(sum(z)/(2*nrow(X)))
}
theta=matrix(rep(0,ncol(X)))
round(computeCost(X,y,theta),2)
theta
theta
gradientDescent=function(X, y, theta, alpha, iters){
gd=list()
cost=rep(0,iters)
for(k in 1:iters){
z=rep(0,ncol(X))
for(i in 1:ncol(X)){
for(j in 1:nrow(X)){
z[i]=z[i]+(((X[j,]%*%theta)-y[j])*X[j,i])
}
}
theta= theta-((alpha/nrow(X))*z)
cost[k]=computeCost(X,y,theta)
}
gd$theta= theta
gd$cost=cost
gd
}
iterations = 1500
alpha = 0.01
theta= matrix(rep(0, ncol(X)))
gradientDescent_results=gradientDescent(X,y,theta,alpha,iterations)
theta=gradientDescent_results$theta
theta
data.frame(Cost=gradientDescent_results$cost,Iterations=1:iterations)%>%
ggplot(aes(x=Iterations,y=Cost))+geom_line(color="blue")+
ggtitle("Cost as a function of number of iteration")+
theme(plot.title = element_text(size = 16,colour="red"))
ex1data1%>%ggplot(aes(x=population, y=profit))+
geom_point(color="blue",size=3,alpha=0.5)+
ylab('Profit in $10,000s')+
xlab('Population of City in 10,000s')+
ggtitle ('Figure 1: Scatter plot of training data') +
geom_abline(intercept = theta[1], slope = theta[2],col="red",show.legend=TRUE)+
theme(plot.title = element_text(size = 16,colour="red"))+
annotate("text", x = 12, y = 20, label = paste0("Profit = ",round(theta[1],4),"+",round(theta[2],4)," * Population"))
Intercept=seq(from=-10,to=10,length=100)
Slope=seq(from=-1,to=4,length=100)
Cost = matrix(0,length(Intercept), length(Slope));
for(i in 1:length(Intercept)){
for(j in 1:length(Slope)){
t = c(Intercept[i],Slope[j])
Cost[i,j]= computeCost(X, y, t)
}
}
persp3D(Intercept,Slope,Cost,theta=-45, phi=25, expand=0.75,lighting = TRUE,
ticktype="detailed", xlab="Intercept", ylab="Slope",
zlab="",axes=TRUE, main="Surface")
image.plot(Intercept,Slope,Cost, main="Contour, showing minimum")
contour(Intercept,Slope,Cost, add = TRUE,n=30,labels='')
points(theta[1],theta[2],col='red',pch=4,lwd=6)
library(fields)
library(plot3D)
Intercept=seq(from=-10,to=10,length=100)
Slope=seq(from=-1,to=4,length=100)
Cost = matrix(0,length(Intercept), length(Slope));
for(i in 1:length(Intercept)){
for(j in 1:length(Slope)){
t = c(Intercept[i],Slope[j])
Cost[i,j]= computeCost(X, y, t)
}
}
persp3D(Intercept,Slope,Cost,theta=-45, phi=25, expand=0.75,lighting = TRUE,
ticktype="detailed", xlab="Intercept", ylab="Slope",
zlab="",axes=TRUE, main="Surface")
image.plot(Intercept,Slope,Cost, main="Contour, showing minimum")
contour(Intercept,Slope,Cost, add = TRUE,n=30,labels='')
points(theta[1],theta[2],col='red',pch=4,lwd=6)
iterations = 15000
alpha = 0.01
theta= matrix(rep(0, ncol(X)))
gradientDescent_results=gradientDescent(X,y,theta,alpha,iterations)
theta=gradientDescent_results$theta
theta
my_lm <- train(profit~population, data=ex1data1,method = "lm")
my_lm$finalModel$coefficients
ex1data2 <- fread("ex1data2.txt",col.names=c("size","bedrooms","price"))
head(ex1data2)
ex1data2=as.data.frame(ex1data2)
for(i in 1:(ncol(ex1data2)-1)){
ex1data2[,i]=(ex1data2[,i]-mean(ex1data2[,i]))/sd(ex1data2[,i])
}
X=cbind(1,ex1data2$size,ex1data2$bedrooms)
y=ex1data2$price
head(X)
iterations = 6000
alpha = 0.01
theta= matrix(rep(0, ncol(X)))
gradientDescent_results=gradientDescent(X,y,theta,alpha,iterations)
theta=gradientDescent_results$theta
theta
theta2=solve((t(X)%*%X))%*%t(X)%*%y
theta2
ex1data2 <- fread("ex1data2.txt",col.names=c("size","bedrooms","price"))
my_lm <- train(price~size+bedrooms, data=ex1data2,method = "lm",
preProcess = c("center","scale"))
my_lm$finalModel$coefficients
options()
options(digits=7)
my_lm$finalModel$coefficients
theta2
set.seed(20170103)
production = matrix(
data = floor(runif(12, min=10000, max=20000)),
nrow = 4,
ncol = 3,
dimnames = list(c("red_ale", "stout", "lager", "ipa"),
c(2016, 2015, 2014))
)
production
chisq.test(production)
tours = data.frame("attendance_count" = floor(runif(105, min = 3, max = 35)),
"day" = rep(c("Saturday", "Sunday")))
t.test(attendance_count ~ day, data = tours, var.equal = TRUE)
tours = data.frame("attendance_count" = floor(runif(105, min = 3, max = 35)),
"day" = rep(c("Saturday", "Sunday")))
tours = data.frame("attendance_count" = floor(runif(105, min = 3, max = 35)),
"day" = rep(c("Saturday", "Sunday")))
floor(runif(105, min = 3, max = 35))
rep(c("Saturday", "Sunday"))
rep(c("Saturday", "Sunday"),105)
?rep
?runif
rep_len(c(1,2),10)
rep_len(c("Saturday", "Sunday"),105)
tours = data.frame("attendance_count" = floor(runif(105, min = 3, max = 35)),
"day" = rep_len(c("Saturday", "Sunday"),105))
tours = data.frame("attendance_count" = floor(runif(105, min = 3, max = 35)),
"day" = rep_len(c("Saturday", "Sunday"),105))
t.test(attendance_count ~ day, data = tours, var.equal = TRUE)
ratings = data.frame("age_group" = c(rep("21-25", 9), rep("26-30", 9), rep("31+", 9)),
"rating" = floor(runif(27, min = 1, max = 5)))
fit_anova <- aov(rating ~ age_group, data = ratings)
summary(fit_anova)
devtools::install_github("rstudio/tensorflow")
set.seed(1)
nA = 2
nB = 3 # levels
nsample = 10
A = gl(nA, 1, nA, lab=paste("a",1:nA, sep=""))
B = gl(nB, 1, nB, lab=paste("b",1:nb, sep=""))
data - expand.grid(A =A, B = B, n=1:nsample)
B = gl(nB, 1, nB, lab=paste("b",1:nB, sep=""))
data - expand.grid(A =A, B = B, n=1:nsample)
data = expand.grid(A =A, B = B, n=1:nsample)
X = model.matrix(~A*B, data = data)
data
eff = c(40, 15, 5, 0, -15, 10)
sigma = 3
n = nrow(data)
eps = rnorm(n, 0, sigma) # residuals
data$y = as.numeric(X %*% eff+ eps)
head(data)
setwd('C:/Users/ning/OneDrive/python works/parametric_nonparametric_statistics_comparison/ANOVA')
set.seed(1)
nA = 2
nB = 3 # levels
nsample = 10
A = gl(nA, 1, nA, lab=paste("a",1:nA, sep=""))
B = gl(nB, 1, nB, lab=paste("b",1:nB, sep=""))
data = expand.grid(A =A, B = B, n=1:nsample)
X = model.matrix(~A*B, data = data)
eff = c(40, 15, 5, 0, -15, 10)
sigma = 3
n = nrow(data)
eps = rnorm(n, 0, sigma) # residuals
data$y = as.numeric(X %*% eff+ eps)
head(data)
write.csv(data,'ANOVA data.csv')
